{"version":3,"file":"index.js","sources":["../webpack://pinky/webpack/runtime/compat","../webpack://pinky/./src/index.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","const core = require('@actions/core');\nconst FormData = require('form-data');\nconst telegram = require('./utilities/telegram_bot');\nconst slackSend = require('./utilities/slack_send');\nconst discord = require('./utilities/discord_bot');\nvar fs = require('fs');\n\nasync function run() {\n  try {\n    /// Get all the action input values\n    const slacktoken = core.getInput('slack_token');\n    const path = core.getInput('path');\n    const channel = core.getInput('channel');\n    const filename = core.getInput('filename');\n    const filetype = core.getInput('filetype');\n    const comment = core.getInput('comment');\n    const telegram_token = core.getInput('telegram_token');\n    const telegram_chat_id = core.getInput('telegram_chat_id');\n    const webhookUrl = core.getInput('webhook_url');\n\n    // File to pass to each platform\n    const file = fs.createReadStream(path);\n\n\n    /// Send file to telegram incase the token is provided\n    if (telegram_token && telegram_chat_id) {\n      await telegram.telegramSend(telegram_token, file, telegram_chat_id, comment);\n    }\n\n    /// Send file to slack incase the token is provided\n    if (slacktoken) {\n      // var form = new FormData();\n      // form.append('token', slacktoken);\n      // form.append('file', file);\n      // if (filename) form.append('filename', filename);\n      // if (channel) form.append('channels', channel);\n      // if (filetype) form.append('filetype', filetype);\n      // if (comment) form.append('initial_comment', comment);\n      await slackSend()\n    } else {\n      core.setFailed('Slack token must set');\n    }\n\n\n    /// Send File to discord \n    if (webhookUrl) {\n      await discord.send(file, webhookUrl, comment);\n    }\n\n  } catch (error) {\n    console.log(error);\n    core.setFailed(error);\n  }\n}\n\nrun();"],"mappings":";;AAAA;AACA;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","sourceRoot":""}